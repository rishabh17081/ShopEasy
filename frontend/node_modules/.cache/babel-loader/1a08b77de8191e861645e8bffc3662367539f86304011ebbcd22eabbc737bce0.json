{"ast":null,"code":"var _jsxFileName = \"/Users/rishabhsharma/PycharmProjects/ecommerce-site/frontend/src/contexts/CartContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cartItems, setCartItems] = useState([]);\n  const [totalItems, setTotalItems] = useState(0);\n  const [totalPrice, setTotalPrice] = useState(0);\n  useEffect(() => {\n    // Load cart from localStorage on mount\n    const savedCart = localStorage.getItem('cart');\n    if (savedCart) {\n      setCartItems(JSON.parse(savedCart));\n    }\n  }, []);\n  useEffect(() => {\n    // Update totals when cart items change\n    let items = 0;\n    let price = 0;\n    cartItems.forEach(item => {\n      items += item.quantity;\n      price += item.price * item.quantity;\n    });\n    setTotalItems(items);\n    setTotalPrice(price);\n\n    // Save to localStorage\n    localStorage.setItem('cart', JSON.stringify(cartItems));\n  }, [cartItems]);\n  const addToCart = (product, quantity = 1) => {\n    setCartItems(prevItems => {\n      // Check if the product is already in cart\n      const existingItemIndex = prevItems.findIndex(item => item.id === product.id);\n      if (existingItemIndex >= 0) {\n        // If product exists, update quantity\n        const updatedItems = [...prevItems];\n        updatedItems[existingItemIndex].quantity += quantity;\n        return updatedItems;\n      } else {\n        // If product doesn't exist, add new item\n        return [...prevItems, {\n          ...product,\n          quantity\n        }];\n      }\n    });\n  };\n  const removeFromCart = productId => {\n    setCartItems(prevItems => prevItems.filter(item => item.id !== productId));\n  };\n  const updateQuantity = (productId, quantity) => {\n    if (quantity <= 0) {\n      removeFromCart(productId);\n      return;\n    }\n    setCartItems(prevItems => prevItems.map(item => item.id === productId ? {\n      ...item,\n      quantity\n    } : item));\n  };\n  const clearCart = () => {\n    setCartItems([]);\n  };\n  const value = {\n    cartItems,\n    totalItems,\n    totalPrice,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"cpwx8/Lt8KVzSCQ0p9L94WKovWk=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cartItems","setCartItems","totalItems","setTotalItems","totalPrice","setTotalPrice","savedCart","localStorage","getItem","JSON","parse","items","price","forEach","item","quantity","setItem","stringify","addToCart","product","prevItems","existingItemIndex","findIndex","id","updatedItems","removeFromCart","productId","filter","updateQuantity","map","clearCart","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rishabhsharma/PycharmProjects/ecommerce-site/frontend/src/contexts/CartContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\nexport const CartContext = createContext();\n\nexport const CartProvider = ({ children }) => {\n  const [cartItems, setCartItems] = useState([]);\n  const [totalItems, setTotalItems] = useState(0);\n  const [totalPrice, setTotalPrice] = useState(0);\n\n  useEffect(() => {\n    // Load cart from localStorage on mount\n    const savedCart = localStorage.getItem('cart');\n    if (savedCart) {\n      setCartItems(JSON.parse(savedCart));\n    }\n  }, []);\n\n  useEffect(() => {\n    // Update totals when cart items change\n    let items = 0;\n    let price = 0;\n    \n    cartItems.forEach(item => {\n      items += item.quantity;\n      price += item.price * item.quantity;\n    });\n    \n    setTotalItems(items);\n    setTotalPrice(price);\n    \n    // Save to localStorage\n    localStorage.setItem('cart', JSON.stringify(cartItems));\n  }, [cartItems]);\n\n  const addToCart = (product, quantity = 1) => {\n    setCartItems(prevItems => {\n      // Check if the product is already in cart\n      const existingItemIndex = prevItems.findIndex(item => item.id === product.id);\n      \n      if (existingItemIndex >= 0) {\n        // If product exists, update quantity\n        const updatedItems = [...prevItems];\n        updatedItems[existingItemIndex].quantity += quantity;\n        return updatedItems;\n      } else {\n        // If product doesn't exist, add new item\n        return [...prevItems, { ...product, quantity }];\n      }\n    });\n  };\n\n  const removeFromCart = (productId) => {\n    setCartItems(prevItems => prevItems.filter(item => item.id !== productId));\n  };\n\n  const updateQuantity = (productId, quantity) => {\n    if (quantity <= 0) {\n      removeFromCart(productId);\n      return;\n    }\n    \n    setCartItems(prevItems => \n      prevItems.map(item => \n        item.id === productId ? { ...item, quantity } : item\n      )\n    );\n  };\n\n  const clearCart = () => {\n    setCartItems([]);\n  };\n\n  const value = {\n    cartItems,\n    totalItems,\n    totalPrice,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart\n  };\n\n  return (\n    <CartContext.Provider value={value}>\n      {children}\n    </CartContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}